@startuml

abstract class DefaultEntity {
  id: Long
  dataCriacao: DateTime
  dataAtualizacao: DateTime
}

abstract class Pessoa {
  nome: String
  email: String
  senha: String
}

class PessoaFisica {
  cpf: String
  rg: String
  dataNascimento: Date
}

class PessoaJuridica {
  cnpj: String
  inscricaoEstadual: String
  razaoSocial: String
}

class Cliente {
  dataCadastro: Date
}

class UsuarioAdministrador {
  cargo: String
  departamento: String
  nivelAcesso: String
}

class Endereco {
  numero: String
  complemento: String
  bairro: String
  cidade: String
  estado: String
  cep: String
  pais: String
  enderecoEntrega: Boolean
  enderecoPrincipal: Boolean
}

class Telefone {
  ddd: Integer
  numero: String
  tipo: String
  telefonePrincipal: Boolean
}

class Fabricante {
  nome: String
  cnpj: String
  telefone: String
  email: String
}

class Agrotoxico {
  nome: String
  descricao: String
  codigoBarras: String
  tipoFormulacao: TipoFormulacao
}

class Fornecedor {
  nome: String
  cnpj: String
  telefone: String
  email: String
  website: String
}

class Estoque {
  quantidade: Integer
  dataEntrada: Date
  dataValidade: Date
  lote: String
  precoCompra: Double
  precoVenda: Double
}

class Compra {
  dataPedido: DateTime
  status: StatusCompra
  valorTotal: Double
  formaPagamento: FormaPagamento
  observacoes: String
}

class ItemCompra {
  quantidade: Integer
  valorUnitario: Double
  valorTotal: Double
  desconto: Double
}

class LogAcesso {
  dataHora: DateTime
  enderecoIp: String
  tipoLog: TipoLog
  descricao: String
  navegador: String
  sistemaOperacional: String
  usuario: String
}

class LogAuditoria {
  dataHora: DateTime
  entidade: String
  operacao: TipoOperacao
  entidadeId: Long
  valorAntigo: String
  valorNovo: String
  usuario: String
}

class LogErro {
  dataHora: DateTime
  mensagem: String
  stackTrace: String
  classe: String
  metodo: String
  linha: Integer
  severidade: NivelSeveridade
}

class ContaUsuario {
  ultimoAcesso: DateTime
  statusConta: StatusConta
  tentativasLogin: Integer
  bloqueado: Boolean
  dataExpiracaoSenha: Date
}

class NotaFiscal {
  numero: String
  serie: String
  dataEmissao: DateTime
  valorTotal: Double
  xmlNota: String
  chaveFiscal: String
  statusNota: StatusNotaFiscal
}

enum TipoFormulacao {
  SOLUCAO
  SUSPENSAO
  EMULSAO
  GRANULADO
}

enum TipoLog {
  INFO
  ALERTA
  ERRO
  DEBUG
  ACESSO
}

enum TipoOperacao {
  INSERCAO
  ATUALIZACAO
  EXCLUSAO
  CONSULTA
}

enum NivelSeveridade {
  BAIXO
  REGULAR
  ALTO
  CRITICO
}

enum StatusCompra {
  AGUARDANDO_PAGAMENTO
  PAGO
  EM_SEPARACAO
  ENVIADO
  ENTREGUE
  CANCELADO
}

enum FormaPagamento {
  CARTAO_CREDITO
  BOLETO
  PIX
  TRANSFERENCIA
}

enum StatusConta {
  ATIVA
  INATIVA
  BLOQUEADA
  PENDENTE_CONFIRMACAO
}

enum StatusNotaFiscal {
  EMITIDA
  CANCELADA
  ERRO_EMISSAO
  PENDENTE
}
 
DefaultEntity <|-- Pessoa
DefaultEntity <|-- Endereco
DefaultEntity <|-- Telefone
DefaultEntity <|-- Fabricante
DefaultEntity <|-- Agrotoxico
DefaultEntity <|-- Fornecedor
DefaultEntity <|-- Estoque
DefaultEntity <|-- LogAcesso
DefaultEntity <|-- LogAuditoria
DefaultEntity <|-- LogErro
DefaultEntity <|-- Compra
DefaultEntity <|-- ItemCompra
DefaultEntity <|-- ContaUsuario
DefaultEntity <|-- NotaFiscal

Pessoa <|-- PessoaFisica
Pessoa <|-- PessoaJuridica
PessoaFisica <|-- Cliente
PessoaJuridica <|-- Cliente
PessoaJuridica <|-- UsuarioAdministrador

Pessoa "1" -- "1" ContaUsuario : possui >
Compra "1" -- "1" NotaFiscal : gera >

Pessoa "1" *-- "*" Endereco : possui >
Pessoa "1" *-- "*" Telefone : possui >
Fabricante "1" -- "*" Agrotoxico : produz >
Fornecedor "1" -- "*" Estoque : fornece >
Agrotoxico "1" -- "*" Estoque : está em >

Pessoa "1" -- "*" Compra : realiza >
Compra "1" *-- "*" ItemCompra : contém >
Estoque "1" -- "*" ItemCompra : origina >
Endereco "1" -- "*" Compra : entrega em >

UsuarioAdministrador "1" -- "*" LogAcesso : gera >
UsuarioAdministrador "1" -- "*" LogAuditoria : produz >
UsuarioAdministrador "1" -- "*" LogErro : registra >

Fornecedor "*" -- "*" Agrotoxico : fornece >

' Notas
note top of Cliente
  Cliente pode ser Pessoa Física ou Jurídica
  Acesso restrito: apenas CRUD da própria conta
  e compras de produtos
end note

note top of UsuarioAdministrador
  Usuário Administrador é sempre Pessoa Jurídica
  Acesso completo: CRUD de produtos, estoque,
  fabricantes e fornecedores
end note

note top of DefaultEntity
  Classe base para todas as entidades
  Contém campos de auditoria e controle de versão
end note

note right of LogAuditoria
  Registra alterações nas entidades
  com informações de antes e depois
end note

note right of Compra
  Tanto Cliente quanto UsuarioAdministrador
  podem realizar compras no sistema,
  mas devem estar logados
end note

note right of Endereco
  Cliente escolhe qual endereço
  será usado para entrega da compra
end note

note right of ContaUsuario
  Relação 1:1 com Pessoa
  Cada pessoa tem exatamente uma conta
  e cada conta pertence a exatamente uma pessoa
end note

note right of NotaFiscal
  Relação 1:1 com Compra
  Cada compra gera exatamente uma nota fiscal
  e cada nota fiscal está associada a exatamente uma compra
end note

@enduml